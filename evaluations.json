{
  "Diegoarango20/act_web1_s4": {
    "repositoryUrl": "Diegoarango20/act_web1_s4",
    "studentName": "Diego Alejandro  Arango",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La función calcula correctamente el cuadrado de un número. El código es limpio y fácil de entender. Buen trabajo."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! El código es conciso, funcional y utiliza el valor por defecto correctamente. Cumple con todos los requisitos del ejercicio."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, utiliza la función `reduce` de manera eficiente y resuelve correctamente el problema planteado."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Utiliza una IIFE correctamente para imprimir el mensaje al definirse la función. El código es conciso y cumple con el objetivo."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, implementando recursividad como se solicitó. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando `filter` de manera eficiente. El código es legible y funcional."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, correcto y utiliza una función flecha como se solicitó. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución es concisa, correcta y cumple con los requisitos del ejercicio. El uso de `setTimeout` con una función anónima es adecuado."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código implementa correctamente un contador privado usando una IIFE y closure. La solución es concisa y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza recursión de manera eficiente para calcular el factorial. El código es claro y conciso."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. El código es limpio y fácil de entender, demostrando una buena aplicación de los conceptos."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente al utilizar `reduce`. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 1,
        "fileFound": true,
        "feedback": "El código proporcionado no resuelve el problema planteado (reemplazar espacios por guiones). En cambio, multiplica los elementos de un arreglo. Debes implementar la función que reemplace los espacios por guiones usando una expresión de función."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y utiliza correctamente una IIFE con closure para mantener el estado del contador, cumpliendo con la descripción del problema."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando recursión de manera eficiente para invertir la cadena. El código es legible y fácil de entender."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 1,
        "fileFound": true,
        "feedback": "El código no cumple con la descripción de la actividad, que solicitaba una función flecha con parámetro rest para sumar un número variable de argumentos. En cambio, presenta una función 'operacion' que recibe un callback."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código cumple con el objetivo de la actividad y presenta una buena estructura, demostrando un entendimiento claro de las funciones de orden superior."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función cumple con los requisitos básicos, pero es una validación muy simple. Podrías mejorarla utilizando expresiones regulares para una validación más robusta de la sintaxis del correo electrónico."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza una función anónima dentro de `setTimeout` como se esperaba. El código es legible y funcional."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y utiliza la función flecha como se solicitó. El código es limpio y fácil de entender, implementando buenas prácticas con el uso de `reduce`."
      }
    ],
    "overallScore": 4.55,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T21:11:26.800Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "sepumarcela/act_web1_s4": {
    "repositoryUrl": "sepumarcela/act_web1_s4",
    "studentName": "Yuly Marcela Sepulveda Sepulveda",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con la descripción de la actividad. Buen trabajo."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con todos los requisitos de la actividad, incluyendo el uso de una función de expresión y el valor por defecto para el parámetro 'nombre'."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Aunque se pedía una función flecha, la lógica implementada es clara y concisa. Para la próxima, intenta usar la sintaxis de función flecha como se solicita en la descripción."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos del ejercicio, utilizando una IIFE para imprimir el mensaje al definirse la función. El código es conciso y fácil de entender."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 2,
        "fileFound": true,
        "feedback": "La solución funciona correctamente, pero no utiliza recursión como se solicitaba.  Deberías implementar la función de forma recursiva para cumplir con los requisitos de la actividad."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional, aunque podría implementarse usando el método `filter` de los arreglos para que sea una función de orden superior como se solicita. El código es legible."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y utiliza una función flecha como se solicitó. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución funciona correctamente y cumple con el requerimiento. Podrías haber usado directamente una función anónima dentro de setTimeout en lugar de declarar una función aparte."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, implementando un IIFE con closure para mantener el contador privado. El código es limpio y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 2,
        "fileFound": true,
        "feedback": "El código contiene un error lógico: la sentencia `return numero * factorial(numero - 1)` nunca se ejecuta porque está después de `return 1` dentro del bloque `if`. Además, falta considerar el caso cuando el número es negativo (aunque no se especificó en la descripción)."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y eficiente. Utiliza el operador módulo de manera adecuada para determinar si un número es par."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza `reduce` de forma eficiente para multiplicar los elementos del arreglo. El código es claro y conciso, siguiendo las buenas prácticas."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza el método `replace` con una expresión regular para reemplazar todos los espacios, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente solución! Cumple con todos los requisitos: utiliza una IIFE con closure para mantener el contador privado y genera IDs únicos correctamente. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente al usar recursión para invertir la cadena. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es claro, conciso y utiliza correctamente la función flecha y el parámetro rest."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, cumpliendo con todos los requisitos de la actividad. El código es limpio y fácil de entender, implementando adecuadamente una función de orden superior."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función cumple con los requisitos básicos, pero no es una validación completa de un correo electrónico (ej: no verifica si hay caracteres antes del @ o después del .com). Considera usar expresiones regulares para una validación más robusta."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, concisa y cumple con todos los requisitos del problema. El uso de setTimeout y la función anónima es adecuado."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con el uso de función flecha y el cálculo del promedio."
      }
    ],
    "overallScore": 4.5,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T21:16:00.645Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "MarioMunera1993/act_web1_s4": {
    "repositoryUrl": "MarioMunera1993/act_web1_s4",
    "studentName": "Mario Alonso Munera Velez",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La función calcula correctamente el cuadrado de un número. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. Utiliza una función flecha y un bucle for para sumar los elementos del arreglo, cumpliendo con los requisitos. El código es legible y bien estructurado."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso y cumple perfectamente con la definición de una IIFE para imprimir el mensaje solicitado."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente al usar recursión. El código es limpio y fácil de entender, cumpliendo con el objetivo de la actividad. Buena implementación."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza la función `filter` de manera eficiente para cumplir con el objetivo."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando una función flecha de manera eficiente para convertir la cadena a mayúsculas. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza correctamente `setTimeout` con una función anónima y cumple con la descripción de la actividad. Buen trabajo."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, implementa una IIFE con closure para mantener el contador privado. El código es conciso y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 0,
        "fileFound": false,
        "feedback": "Error al evaluar: got status: 503 . {\"error\":{\"code\":503,\"message\":\"The model is overloaded. Please try again later.\",\"status\":\"UNAVAILABLE\"}}"
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función no retorna un valor booleano (true/false) como debería. Además, imprime 'Es Impar' siempre, independientemente de si el número es par o no. Falta un `else` en la condicional."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza `reduce` adecuadamente. Considera añadir validación para asegurar que la entrada sean números y mejorar la robustez del código ante entradas incorrectas."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza la función `replace` con una expresión regular para reemplazar todos los espacios, demostrando buen conocimiento del lenguaje."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Utiliza correctamente una IIFE y un closure para mantener el estado del contador, generando IDs únicos como se esperaba. El código es limpio y funcional."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza recursión de manera eficiente para invertir la cadena. El código es claro y conciso."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza correctamente la función flecha con el parámetro rest y reduce para sumar los argumentos. Cumple con todos los requisitos de la actividad."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y funcional, demostrando una correcta comprensión de las funciones de orden superior y callbacks en JavaScript."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función cumple con los requisitos básicos, pero es demasiado simplista. No valida la estructura completa de un correo electrónico, solo la presencia de '@' y que termine en '.com'. Se recomienda usar una expresión regular para una validación más robusta."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y resuelve el problema planteado usando una función anónima con `setTimeout` correctamente."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es concisa, correcta y utiliza una función flecha como se solicitó. El código es legible y aplica buenas prácticas al usar `reduce` para calcular la suma."
      }
    ],
    "overallScore": 4.5,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.5/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Completar los archivos faltantes: ejercicios/ejercicio_10.js"
    ],
    "evaluatedAt": "2025-08-21T21:22:29.846Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Julio28012020/act_web1_s4": {
    "repositoryUrl": "Julio28012020/act_web1_s4",
    "studentName": "Roque Aldana",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. La función calcula el cuadrado correctamente y los ejemplos de uso son claros."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, correcto y aplica buenas prácticas al usar el valor por defecto en el parámetro de la función. Bien hecho."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 2,
        "fileFound": true,
        "feedback": "La función solo suma tres números, no todos los elementos de un arreglo.  Deberías iterar sobre el arreglo para sumar todos sus elementos."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y usa una IIFE. Se sugiere revisar la ortografía en el mensaje (¡Bienvenido!)."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza recursión correctamente para contar las vocales. Bien hecho."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza correctamente la función `filter` para resolver el problema. Los ejemplos de prueba son adecuados."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y resuelve correctamente el problema utilizando una función flecha como se solicitó."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función setTimeout se implementa correctamente con una función anónima. Sin embargo, el orden de los console.log puede ser confuso, ya que 'Temporizador -3 segundos' se imprime antes del mensaje del temporizador. Considera la claridad en el orden de ejecución."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución cumple con todos los requisitos utilizando una IIFE y closure para mantener el contador privado. El código es conciso, funcional y sigue las buenas prácticas."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución recursiva para el cálculo del factorial. El código es conciso, legible y funcional, e incluye casos base correctos y pruebas con varios ejemplos."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La función esPar cumple correctamente con la descripción de la actividad. El código es limpio, funcional y sigue buenas prácticas al usar el operador módulo para determinar si un número es par."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, utilizando `reduce` de manera concisa. El código es limpio y fácil de entender, cumpliendo con la descripción de la actividad."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Solución correcta y concisa. Utiliza `replace` con una expresión regular para reemplazar todos los espacios, lo cual es eficiente y legible."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código utiliza correctamente una IIFE con closure para mantener el contador interno y generar IDs únicos de manera consistente. Cumple con todos los requisitos."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, claro y utiliza la recursión de manera correcta para invertir la cadena. Los ejemplos de prueba son adecuados."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Utiliza la sintaxis de función flecha con parámetro rest y reduce correctamente para sumar los argumentos. El código es conciso y funciona como se espera."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, funcional y demuestra un buen entendimiento de las funciones de orden superior y callbacks."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función cumple con la validación básica solicitada, pero la validación de correos electrónicos es mucho más compleja. Deberías considerar usar expresiones regulares para una validación más robusta y completa."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es limpio, funcional y demuestra un buen entendimiento del uso de `setTimeout` con funciones anónimas."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y cumple con todos los requisitos de la actividad. El uso de la función flecha y `reduce` es apropiado y eficiente."
      }
    ],
    "overallScore": 4.65,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.7/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T21:27:11.524Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "irwincol/act_web1_s4": {
    "repositoryUrl": "irwincol/act_web1_s4",
    "studentName": "irwin Colmenaerez Castillo",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. La función calcula el cuadrado del número correctamente y se incluye un ejemplo de uso con `console.log`."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, cumple con los requisitos de la actividad. Se utiliza la sintaxis de función flecha de forma adecuada y se maneja el valor por defecto correctamente."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos. El código es legible y la función flecha está implementada correctamente. Podrías considerar usar `reduce` para una solución más concisa."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución implementa correctamente una IIFE que imprime el mensaje deseado. El código es limpio y conciso."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución recursiva para contar vocales. El código es limpio, legible y cumple con los requisitos. Buen uso de la recursión y lógica condicional."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando `filter` de manera eficiente. El código es legible y cumple con el objetivo de la actividad."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es legible y utiliza la función flecha como se solicitó. ¡Buen trabajo!"
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con los requisitos de la actividad. El código es limpio y fácil de entender, utilizando correctamente setTimeout y la función anónima."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y elegante, implementando una IIFE con closure para mantener el estado privado del contador. El código es limpio y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La función factorial es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con la descripción de la actividad al usar recursión. Excelente trabajo."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve correctamente el problema. Sin embargo, la función debería retornar un booleano (true/false) en lugar de un string. Elimina los console.log de la función, estos deben estar fuera."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando `reduce` de forma eficiente. El código es limpio y fácil de entender, cumpliendo con el objetivo de la actividad."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando una expresión regular para reemplazar todos los espacios. El código es limpio y funcional."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Cumple con todos los requisitos de la actividad, utilizando una IIFE con closure de forma correcta para generar IDs únicos."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución recursiva. El código es conciso, claro y cumple con los requisitos de la actividad. La función `invertir` funciona correctamente."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Cumple con todos los requisitos, usando correctamente la función flecha con parámetro rest y `reduce` para sumar los argumentos. El código es claro y conciso."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El código cumple con la descripción de la actividad y las buenas prácticas de programación.  Bien hecho."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función cumple con la validación básica solicitada. Sin embargo, una validación de correo electrónico robusta debería considerar más patrones y caracteres permitidos para una mejor experiencia de usuario. Se recomienda usar expresiones regulares para validaciones más completas."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso, legible y utiliza correctamente la función flecha y `reduce` para calcular el promedio. La solución es completa y funcional."
      }
    ],
    "overallScore": 4.9,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.9/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-21T21:40:57.581Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "Estefania-Catano/act_web1_s4": {
    "repositoryUrl": "Estefania-Catano/act_web1_s4",
    "studentName": "Estefania Cataño Hoyos",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio, legible y cumple con los requisitos de la actividad."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La solución funciona, pero no cumple con el requisito de usar una expresión de función. Además, la variable `nombreUsuario` debería ser un parámetro de la función para hacerla más reutilizable. Podrías mejorar la estructura y seguir la consigna al pie de la letra."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, clara y concisa. El uso de la función flecha es adecuado y la lógica para sumar los elementos del arreglo es eficiente."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Implementa una IIFE que imprime el mensaje esperado. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, recursiva y utiliza buenas prácticas como convertir a minúsculas para la comparación. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. Utiliza `filter` correctamente y el código es conciso y legible. El ejemplo con `console.log` ayuda a entender la funcionalidad."
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando una función flecha como se pedía. El código es legible y cumple con la funcionalidad requerida."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con los requisitos del ejercicio utilizando una función anónima dentro de `setTimeout`."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código cumple con todos los requisitos de la actividad utilizando una IIFE y closure para mantener el contador privado. Bien estructurado y funcional."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, implementando la función factorial de forma recursiva eficientemente. El código es legible y cumple con el objetivo del ejercicio."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función es correcta y funciona como se espera. Se sugiere retornar `true` o `false` en lugar de strings para una mejor usabilidad de la función en otros contextos."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es conciso y utiliza `reduce` de manera efectiva para lograr la multiplicación de los elementos del arreglo."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución es concisa, correcta y utiliza el método `replace` con una expresión regular de manera eficiente. Buen uso de la función de expresión."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y cumple con todos los requisitos: IIFE con closure, contador interno y generación de IDs únicos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta, recursiva y eficiente. El código es limpio y fácil de entender. ¡Excelente trabajo!"
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "¡Excelente! La solución es correcta, concisa y utiliza de forma apropiada la función flecha con el parámetro rest y el método reduce. El código es legible y funciona como se espera."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Implementa adecuadamente una función de orden superior y utiliza un callback para realizar una operación personalizada. El código es legible y fácil de entender."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza una expresión regular adecuada para la validación básica del correo. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Cumple con los requisitos del ejercicio utilizando una función anónima y `setTimeout` de manera efectiva."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza una función flecha y el método `reduce` de manera eficiente. Buen trabajo."
      }
    ],
    "overallScore": 4.85,
    "totalActivities": 20,
    "completedActivities": 20,
    "summary": "Excelente trabajo. Completó 20/20 actividades (100%) con una calificación promedio de 4.8/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Continuar con el excelente trabajo y mantener la calidad del código"
    ],
    "evaluatedAt": "2025-08-21T21:46:42.896Z",
    "evaluatedBy": "Sistema de Evaluación"
  },
  "GGP113/act_web1_s4": {
    "repositoryUrl": "GGP113/act_web1_s4",
    "studentName": "paula andrea gil vargas",
    "activities": [
      {
        "activityDescription": "Calcular el cuadrado de un número - Crea una función que reciba un número y devuelva su cuadrado. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_01.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función calcula correctamente el cuadrado. Sin embargo, la función debería retornar el resultado en lugar de imprimirlo directamente en la consola. Falta la sentencia `return`."
      },
      {
        "activityDescription": "Saludar con nombre por defecto - Crea una función que salude a una persona por su nombre. Si no se proporciona un nombre, usa 'Invitado'. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_02.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza el parámetro por defecto de manera adecuada y la estructura del código es limpia."
      },
      {
        "activityDescription": "Sumar elementos de un arreglo - Crea una función que sume todos los números de un arreglo. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_03.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente. El código es limpio y fácil de entender, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Ejecutar un mensaje instantáneamente - Crea una función que imprima '¡Bienvenido!' en la consola al definirse. (Tipo de función: IIFE)",
        "solutionFile": "ejercicios/ejercicio_04.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza una IIFE para imprimir el mensaje al definirse. El código es limpio y cumple con la descripción de la actividad."
      },
      {
        "activityDescription": "Contar vocales en una cadena - Crea una función que cuente las vocales (a, e, i, o, u) en una cadena. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_05.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución recursiva es correcta y concisa. El código es legible y funciona como se espera. Una alternativa iterativa podría ser más eficiente para cadenas largas."
      },
      {
        "activityDescription": "Filtrar números mayores a 10 - Crea una función que reciba un arreglo y devuelva solo los números mayores a 10. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_06.js",
        "score": 0,
        "fileFound": true,
        "feedback": "Error al procesar la evaluación"
      },
      {
        "activityDescription": "Convertir a mayúsculas - Crea una función que convierta una cadena a mayúsculas. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_07.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función cumple el objetivo. Sin embargo, en lugar de imprimir el resultado directamente en la función, sería mejor que la función retornara la cadena en mayúsculas y luego imprimirla en la llamada a la función. Esto permite mayor flexibilidad y reutilización del código."
      },
      {
        "activityDescription": "Temporizador con mensaje - Crea una función que imprima un mensaje después de 3 segundos usando setTimeout. (Tipo de función: Función anónima)",
        "solutionFile": "ejercicios/ejercicio_08.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa, utilizando una función anónima autoejecutable y `setTimeout` para cumplir con los requisitos. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Crear un contador privado - Crea una función que devuelva otra función para contar incrementos, manteniendo el contador privado. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_09.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. Utiliza una IIFE con closure para mantener el contador privado, cumpliendo con los requisitos de la actividad."
      },
      {
        "activityDescription": "Calcular factorial - Crea una función que calcule el factorial de un número. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_10.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y eficiente, implementando la función factorial de manera recursiva como se solicitó. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Verificar si un número es par - Crea una función que determine si un número es par. (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_11.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve correctamente el problema. Sin embargo, la instrucción `console.log` dentro de la función no es necesaria; la función debe limitarse a retornar el valor booleano. Considera eliminarla para mejorar la claridad del código."
      },
      {
        "activityDescription": "Multiplicar elementos de un arreglo - Crea una función que multiplique todos los números de un arreglo. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_12.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función resuelve correctamente el problema. Se puede mejorar la legibilidad y eficiencia utilizando `reduce` para una solución más concisa y funcional, evitando la mutación de `numUno` dentro del bucle."
      },
      {
        "activityDescription": "Reemplazar espacios por guiones - Crea una función que reemplace los espacios en una cadena por guiones. (Tipo de función: Expresión de función)",
        "solutionFile": "ejercicios/ejercicio_13.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función reemplaza los espacios por guiones, pero imprime el resultado en lugar de retornarlo, lo que limita su reutilización. Además, la lógica del bucle podría simplificarse usando `join('-')`."
      },
      {
        "activityDescription": "Generar un ID único - Crea una función que genere un ID único basado en un contador interno. (Tipo de función: IIFE con closure)",
        "solutionFile": "ejercicios/ejercicio_14.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. La función IIFE con closure implementa correctamente la generación de IDs únicos y mantiene el estado interno del contador. El código es limpio y fácil de entender."
      },
      {
        "activityDescription": "Invertir una cadena - Crea una función que invierta una cadena de texto. (Tipo de función: Función recursiva)",
        "solutionFile": "ejercicios/ejercicio_15.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La función recursiva invierte correctamente la cadena. El código es funcional y cumple con el objetivo, aunque podría simplificarse evitando el uso de tantos parámetros en la función recursiva. Considera usar el índice directamente en lugar de contadores adicionales."
      },
      {
        "activityDescription": "Sumar argumentos variables - Crea una función que sume un número variable de argumentos. (Tipo de función: Función flecha con parámetro rest)",
        "solutionFile": "ejercicios/ejercicio_16.js",
        "score": 5,
        "fileFound": true,
        "feedback": "Excelente solución. El código es claro, conciso y cumple con todos los requisitos de la actividad, utilizando correctamente la función flecha y el parámetro rest."
      },
      {
        "activityDescription": "Ejecutar operación personalizada - Crea una función que reciba dos números y una función callback para realizar una operación. (Tipo de función: Función de orden superior)",
        "solutionFile": "ejercicios/ejercicio_17.js",
        "score": 5,
        "fileFound": true,
        "feedback": "La solución es correcta y concisa. El código es limpio y cumple con los requisitos de la actividad. Excelente trabajo."
      },
      {
        "activityDescription": "Validar correo electrónico - Crea una función que valide si una cadena es un correo electrónico básico (contiene @ y .com). (Tipo de función: Declaración de función)",
        "solutionFile": "ejercicios/ejercicio_18.js",
        "score": 3,
        "fileFound": true,
        "feedback": "La función cumple con la validación básica, pero podría mejorarse la lógica de verificación y evitar el uso de `console.log` dentro de la función. Considera usar métodos de string como `includes` o expresiones regulares para una validación más robusta."
      },
      {
        "activityDescription": "Retrasar ejecución de un mensaje - Crea una función que imprima un mensaje después de un tiempo definido por el usuario. (Tipo de función: Función anónima con setTimeout)",
        "solutionFile": "ejercicios/ejercicio_19.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y utiliza una función anónima con setTimeout como se pedía. Sin embargo, la función retrasaMensaje no necesita retornar nada (undefined), y el console.log final imprime ese 'undefined'. Considera eliminar ese console.log final."
      },
      {
        "activityDescription": "Calcular promedio de un arreglo - Crea una función que calcule el promedio de un arreglo de números. (Tipo de función: Función flecha)",
        "solutionFile": "ejercicios/ejercicio_20.js",
        "score": 4,
        "fileFound": true,
        "feedback": "La solución es correcta y funcional. Se puede mejorar la legibilidad evitando redeclarar la variable 'promedio' dentro de la función. Usar 'const' para la variable 'suma' podría ser una buena práctica también."
      }
    ],
    "overallScore": 4.1,
    "totalActivities": 20,
    "completedActivities": 19,
    "summary": "Excelente trabajo. Completó 19/20 actividades (95%) con una calificación promedio de 4.1/5. Demuestra buen dominio de los conceptos.",
    "recommendations": [
      "Revisar y mejorar las actividades con calificación baja"
    ],
    "evaluatedAt": "2025-08-21T21:53:39.250Z",
    "evaluatedBy": "Sistema de Evaluación"
  }
}